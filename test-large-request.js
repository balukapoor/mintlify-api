// Using built-in fetch API (Node.js 18+)

// Test script to reproduce the large request issue
async function testLargeRequest() {
  console.log("🧪 Testing large request scenario...");

  // Create a large request similar to the user's problematic one
  const largeContent = `
You are GenVibe, an expert AI assistant and exceptional software engineer with deep expertise in React Native, Expo, TypeScript, and modern mobile app development. You excel at creating beautiful, functional, and well-structured mobile applications.

## Core Capabilities
- **Mobile Development**: Expert in React Native, Expo, and cross-platform development
- **UI/UX Design**: Creating beautiful, intuitive, and responsive user interfaces
- **Code Architecture**: Writing clean, maintainable, and scalable code
- **Performance**: Optimizing apps for speed, efficiency, and smooth user experience
- **Best Practices**: Following industry standards and modern development patterns

## Development Approach
1. **User-Centric Design**: Always prioritize user experience and intuitive navigation
2. **Clean Code**: Write readable, well-commented, and maintainable code
3. **Component Architecture**: Create reusable, modular components
4. **Performance First**: Optimize for speed and smooth animations
5. **Cross-Platform**: Ensure consistent experience across iOS and Android

## Technical Stack Expertise
- **Frontend**: React Native, Expo, TypeScript, JavaScript
- **Styling**: StyleSheet, Flexbox, responsive design
- **Navigation**: React Navigation, tab navigation, stack navigation
- **State Management**: React hooks, Context API, Redux (when needed)
- **APIs**: REST APIs, fetch, async/await
- **Tools**: Expo CLI, Metro bundler, debugging tools

## Communication Style
- Provide clear, step-by-step explanations
- Include code examples and best practices
- Explain the reasoning behind technical decisions
- Offer alternative approaches when applicable
- Be encouraging and supportive

You are ready to help create amazing mobile applications that users will love!
`.repeat(20); // Make it very large

  const requestBody = {
    model: "gpt-4",
    messages: [
      {
        role: "system",
        content: largeContent,
      },
      {
        role: "user",
        content:
          "template import is done, and you can now use it. Create a modern food delivery mobile app with beautiful UI, smooth animations, and intuitive navigation. Include features like restaurant browsing, menu viewing, cart management, and order tracking.",
      },
      {
        role: "assistant",
        content:
          "I'll create a modern food delivery mobile app with beautiful UI and smooth animations. Let me build this step by step with all the features you mentioned.\n\n```typescript\n// App.tsx - Main application entry point\nimport React from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { StatusBar } from 'expo-status-bar';\nimport { StyleSheet, View } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\n\n// Import screens\nimport HomeScreen from './src/screens/HomeScreen';\nimport RestaurantsScreen from './src/screens/RestaurantsScreen';\nimport CartScreen from './src/screens/CartScreen';\nimport OrdersScreen from './src/screens/OrdersScreen';\nimport ProfileScreen from './src/screens/ProfileScreen';\nimport RestaurantDetailScreen from './src/screens/RestaurantDetailScreen';\nimport MenuItemScreen from './src/screens/MenuItemScreen';\nimport CheckoutScreen from './src/screens/CheckoutScreen';\nimport OrderTrackingScreen from './src/screens/OrderTrackingScreen';\n\n// Import providers\nimport { CartProvider } from './src/context/CartContext';\nimport { ThemeProvider } from './src/context/ThemeContext';\n\nconst Tab = createBottomTabNavigator();\nconst Stack = createStackNavigator();\n\n// Stack Navigator for Home flow\nfunction HomeStack() {\n  return (\n    <Stack.Navigator\n      screenOptions={{\n        headerStyle: {\n          backgroundColor: '#FF6B6B',\n          elevation: 0,\n          shadowOpacity: 0,\n        },\n        headerTintColor: '#fff',\n        headerTitleStyle: {\n          fontWeight: 'bold',\n          fontSize: 18,\n        },\n      }}\n    >\n      <Stack.Screen \n        name=\"HomeMain\" \n        component={HomeScreen} \n        options={{ title: 'FoodieExpress' }}\n      />\n      <Stack.Screen \n        name=\"RestaurantDetail\" \n        component={RestaurantDetailScreen}\n        options={{ title: 'Restaurant' }}\n      />\n      <Stack.Screen \n        name=\"MenuItem\" \n        component={MenuItemScreen}\n        options={{ title: 'Menu Item' }}\n      />\n    </Stack.Navigator>\n  );\n}\n\n// Stack Navigator for Cart flow\nfunction CartStack() {\n  return (\n    <Stack.Navigator\n      screenOptions={{\n        headerStyle: {\n          backgroundColor: '#FF6B6B',\n          elevation: 0,\n          shadowOpacity: 0,\n        },\n        headerTintColor: '#fff',\n        headerTitleStyle: {\n          fontWeight: 'bold',\n          fontSize: 18,\n        },\n      }}\n    >\n      <Stack.Screen \n        name=\"CartMain\" \n        component={CartScreen} \n        options={{ title: 'Your Cart' }}\n      />\n      <Stack.Screen \n        name=\"Checkout\" \n        component={CheckoutScreen}\n        options={{ title: 'Checkout' }}\n      />\n    </Stack.Navigator>\n  );\n}\n\n// Stack Navigator for Orders flow\nfunction OrdersStack() {\n  return (\n    <Stack.Navigator\n      screenOptions={{\n        headerStyle: {\n          backgroundColor: '#FF6B6B',\n          elevation: 0,\n          shadowOpacity: 0,\n        },\n        headerTintColor: '#fff',\n        headerTitleStyle: {\n          fontWeight: 'bold',\n          fontSize: 18,\n        },\n      }}\n    >\n      <Stack.Screen \n        name=\"OrdersMain\" \n        component={OrdersScreen} \n        options={{ title: 'Your Orders' }}\n      />\n      <Stack.Screen \n        name=\"OrderTracking\" \n        component={OrderTrackingScreen}\n        options={{ title: 'Track Order' }}\n      />\n    </Stack.Navigator>\n  );\n}\n\n// Main Tab Navigator\nfunction TabNavigator() {\n  return (\n    <Tab.Navigator\n      screenOptions={({ route }) => ({\n        tabBarIcon: ({ focused, color, size }) => {\n          let iconName: keyof typeof Ionicons.glyphMap;\n\n          if (route.name === 'Home') {\n            iconName = focused ? 'home' : 'home-outline';\n          } else if (route.name === 'Restaurants') {\n            iconName = focused ? 'restaurant' : 'restaurant-outline';\n          } else if (route.name === 'Cart') {\n            iconName = focused ? 'bag' : 'bag-outline';\n          } else if (route.name === 'Orders') {\n            iconName = focused ? 'receipt' : 'receipt-outline';\n          } else if (route.name === 'Profile') {\n            iconName = focused ? 'person' : 'person-outline';\n          } else {\n            iconName = 'help-outline';\n          }\n\n          return <Ionicons name={iconName} size={size} color={color} />;\n        },\n        tabBarActiveTintColor: '#FF6B6B',\n        tabBarInactiveTintColor: '#8E8E93',\n        tabBarStyle: {\n          backgroundColor: '#FFFFFF',\n          borderTopWidth: 1,\n          borderTopColor: '#E5E5EA',\n          paddingBottom: 5,\n          paddingTop: 5,\n          height: 60,\n        },\n        tabBarLabelStyle: {\n          fontSize: 12,\n          fontWeight: '600',\n        },\n        headerShown: false,\n      })}\n    >\n      <Tab.Screen name=\"Home\" component={HomeStack} />\n      <Tab.Screen name=\"Restaurants\" component={RestaurantsScreen} />\n      <Tab.Screen name=\"Cart\" component={CartStack} />\n      <Tab.Screen name=\"Orders\" component={OrdersStack} />\n      <Tab.Screen name=\"Profile\" component={ProfileScreen} />\n    </Tab.Navigator>\n  );\n}\n\nexport default function App() {\n  return (\n    <ThemeProvider>\n      <CartProvider>\n        <NavigationContainer>\n          <StatusBar style=\"light\" backgroundColor=\"#FF6B6B\" />\n          <TabNavigator />\n        </NavigationContainer>\n      </CartProvider>\n    </ThemeProvider>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n  },\n});\n```\n\nNow let me create the context providers for state management:\n\n```typescript\n// src/context/CartContext.tsx\nimport React, { createContext, useContext, useReducer, ReactNode } from 'react';\n\nexport interface CartItem {\n  id: string;\n  name: string;\n  price: number;\n  quantity: number;\n  image: string;\n  restaurantId: string;\n  restaurantName: string;\n  customizations?: string[];\n}\n\ninterface CartState {\n  items: CartItem[];\n  total: number;\n  itemCount: number;\n}\n\ntype CartAction =\n  | { type: 'ADD_ITEM'; payload: CartItem }\n  | { type: 'REMOVE_ITEM'; payload: string }\n  | { type: 'UPDATE_QUANTITY'; payload: { id: string; quantity: number } }\n  | { type: 'CLEAR_CART' };\n\nconst CartContext = createContext<{\n  state: CartState;\n  dispatch: React.Dispatch<CartAction>;\n} | null>(null);\n\nfunction cartReducer(state: CartState, action: CartAction): CartState {\n  switch (action.type) {\n    case 'ADD_ITEM': {\n      const existingItem = state.items.find(item => item.id === action.payload.id);\n      \n      if (existingItem) {\n        const updatedItems = state.items.map(item =>\n          item.id === action.payload.id\n            ? { ...item, quantity: item.quantity + action.payload.quantity }\n            : item\n        );\n        \n        const total = updatedItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);\n        const itemCount = updatedItems.reduce((sum, item) => sum + item.quantity, 0);\n        \n        return {\n          items: updatedItems,\n          total,\n          itemCount,\n        };\n      } else {\n        const updatedItems = [...state.items, action.payload];\n        const total = updatedItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);\n        const itemCount = updatedItems.reduce((sum, item) => sum + item.quantity, 0);\n        \n        return {\n          items: updatedItems,\n          total,\n          itemCount,\n        };\n      }\n    }\n    \n    case 'REMOVE_ITEM': {\n      const updatedItems = state.items.filter(item => item.id !== action.payload);\n      const total = updatedItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);\n      const itemCount = updatedItems.reduce((sum, item) => sum + item.quantity, 0);\n      \n      return {\n        items: updatedItems,\n        total,\n        itemCount,\n      };\n    }\n    \n    case 'UPDATE_QUANTITY': {\n      if (action.payload.quantity <= 0) {\n        return cartReducer(state, { type: 'REMOVE_ITEM', payload: action.payload.id });\n      }\n      \n      const updatedItems = state.items.map(item =>\n        item.id === action.payload.id\n          ? { ...item, quantity: action.payload.quantity }\n          : item\n      );\n      \n      const total = updatedItems.reduce((sum, item) => sum + (item.price * item.quantity), 0);\n      const itemCount = updatedItems.reduce((sum, item) => sum + item.quantity, 0);\n      \n      return {\n        items: updatedItems,\n        total,\n        itemCount,\n      };\n    }\n    \n    case 'CLEAR_CART':\n      return {\n        items: [],\n        total: 0,\n        itemCount: 0,\n      };\n    \n    default:\n      return state;\n  }\n}\n\ninterface CartProviderProps {\n  children: ReactNode;\n}\n\nexport function CartProvider({ children }: CartProviderProps) {\n  const [state, dispatch] = useReducer(cartReducer, {\n    items: [],\n    total: 0,\n    itemCount: 0,\n  });\n\n  return (\n    <CartContext.Provider value={{ state, dispatch }}>\n      {children}\n    </CartContext.Provider>\n  );\n}\n\nexport function useCart() {\n  const context = useContext(CartContext);\n  if (!context) {\n    throw new Error('useCart must be used within a CartProvider');\n  }\n  return context;\n}\n```\n\n```typescript\n// src/context/ThemeContext.tsx\nimport React, { createContext, useContext, ReactNode } from 'react';\n\ninterface Theme {\n  colors: {\n    primary: string;\n    secondary: string;\n    background: string;\n    surface: string;\n    text: string;\n    textSecondary: string;\n    border: string;\n    success: string;\n    warning: string;\n    error: string;\n  };\n  spacing: {\n    xs: number;\n    sm: number;\n    md: number;\n    lg: number;\n    xl: number;\n  };\n  borderRadius: {\n    sm: number;\n    md: number;\n    lg: number;\n  };\n  shadows: {\n    small: object;\n    medium: object;\n    large: object;\n  };\n}\n\nconst theme: Theme = {\n  colors: {\n    primary: '#FF6B6B',\n    secondary: '#4ECDC4',\n    background: '#F8F9FA',\n    surface: '#FFFFFF',\n    text: '#2C3E50',\n    textSecondary: '#7F8C8D',\n    border: '#E5E5EA',\n    success: '#2ECC71',\n    warning: '#F39C12',\n    error: '#E74C3C',\n  },\n  spacing: {\n    xs: 4,\n    sm: 8,\n    md: 16,\n    lg: 24,\n    xl: 32,\n  },\n  borderRadius: {\n    sm: 4,\n    md: 8,\n    lg: 12,\n  },\n  shadows: {\n    small: {\n      shadowColor: '#000',\n      shadowOffset: {\n        width: 0,\n        height: 1,\n      },\n      shadowOpacity: 0.1,\n      shadowRadius: 2,\n      elevation: 2,\n    },\n    medium: {\n      shadowColor: '#000',\n      shadowOffset: {\n        width: 0,\n        height: 2,\n      },\n      shadowOpacity: 0.15,\n      shadowRadius: 4,\n      elevation: 4,\n    },\n    large: {\n      shadowColor: '#000',\n      shadowOffset: {\n        width: 0,\n        height: 4,\n      },\n      shadowOpacity: 0.2,\n      shadowRadius: 8,\n      elevation: 8,\n    },\n  },\n};\n\nconst ThemeContext = createContext<Theme>(theme);\n\ninterface ThemeProviderProps {\n  children: ReactNode;\n}\n\nexport function ThemeProvider({ children }: ThemeProviderProps) {\n  return (\n    <ThemeContext.Provider value={theme}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  return useContext(ThemeContext);\n}\n```\n\nNow let me create the main screens. Starting with the Home screen:\n\n```typescript\n// src/screens/HomeScreen.tsx\nimport React, { useState, useEffect } from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  ScrollView,\n  TextInput,\n  TouchableOpacity,\n  Image,\n  FlatList,\n  Dimensions,\n} from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { useTheme } from '../context/ThemeContext';\nimport { useNavigation } from '@react-navigation/native';\n\nconst { width } = Dimensions.get('window');\n\ninterface Restaurant {\n  id: string;\n  name: string;\n  image: string;\n  rating: number;\n  deliveryTime: string;\n  deliveryFee: number;\n  cuisine: string;\n  featured: boolean;\n}\n\ninterface Category {\n  id: string;\n  name: string;\n  icon: string;\n  color: string;\n}\n\nconst categories: Category[] = [\n  { id: '1', name: 'Pizza', icon: 'pizza-outline', color: '#FF6B6B' },\n  { id: '2', name: 'Burger', icon: 'fast-food-outline', color: '#4ECDC4' },\n  { id: '3', name: 'Sushi', icon: 'fish-outline', color: '#45B7D1' },\n  { id: '4', name: 'Dessert', icon: 'ice-cream-outline', color: '#F39C12' },\n  { id: '5', name: 'Coffee', icon: 'cafe-outline', color: '#8E44AD' },\n  { id: '6', name: 'Healthy', icon: 'leaf-outline', color: '#2ECC71' },\n];\n\nconst featuredRestaurants: Restaurant[] = [\n  {\n    id: '1',\n    name: 'Mario\\'s Pizzeria',\n    image: 'https://images.unsplash.com/photo-1565299624946-b28f40a0ca4b?w=400',\n    rating: 4.8,\n    deliveryTime: '25-35 min',\n    deliveryFee: 2.99,\n    cuisine: 'Italian',\n    featured: true,\n  },\n  {\n    id: '2',\n    name: 'Burger Palace',\n    image: 'https://images.unsplash.com/photo-1568901346375-23c9450c58cd?w=400',\n    rating: 4.6,\n    deliveryTime: '20-30 min',\n    deliveryFee: 1.99,\n    cuisine: 'American',\n    featured: true,\n  },\n  {\n    id: '3',\n    name: 'Sushi Master',\n    image: 'https://images.unsplash.com/photo-1579584425555-c3ce17fd4351?w=400',\n    rating: 4.9,\n    deliveryTime: '30-40 min',\n    deliveryFee: 3.99,\n    cuisine: 'Japanese',\n    featured: true,\n  },\n];\n\nconst popularRestaurants: Restaurant[] = [\n  {\n    id: '4',\n    name: 'Taco Fiesta',\n    image: 'https://images.unsplash.com/photo-1565299585323-38174c4a6c7b?w=400',\n    rating: 4.5,\n    deliveryTime: '15-25 min',\n    deliveryFee: 1.49,\n    cuisine: 'Mexican',\n    featured: false,\n  },\n  {\n    id: '5',\n    name: 'Green Garden',\n    image: 'https://images.unsplash.com/photo-1512621776951-a57141f2eefd?w=400',\n    rating: 4.7,\n    deliveryTime: '20-30 min',\n    deliveryFee: 2.49,\n    cuisine: 'Healthy',\n    featured: false,\n  },\n  {\n    id: '6',\n    name: 'Coffee Corner',\n    image: 'https://images.unsplash.com/photo-1501339847302-ac426a4a7cbb?w=400',\n    rating: 4.4,\n    deliveryTime: '10-15 min',\n    deliveryFee: 0.99,\n    cuisine: 'Coffee & Bakery',\n    featured: false,\n  },\n];\n\nexport default function HomeScreen() {\n  const theme = useTheme();\n  const navigation = useNavigation();\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const renderCategoryItem = ({ item }: { item: Category }) => (\n    <TouchableOpacity style={[styles.categoryItem, { backgroundColor: item.color }]}>\n      <Ionicons name={item.icon as any} size={24} color=\"white\" />\n      <Text style={styles.categoryText}>{item.name}</Text>\n    </TouchableOpacity>\n  );\n\n  const renderFeaturedRestaurant = ({ item }: { item: Restaurant }) => (\n    <TouchableOpacity\n      style={styles.featuredCard}\n      onPress={() => navigation.navigate('RestaurantDetail' as never, { restaurant: item } as never)}\n    >\n      <Image source={{ uri: item.image }} style={styles.featuredImage} />\n      <View style={styles.featuredOverlay}>\n        <View style={styles.featuredInfo}>\n          <Text style={styles.featuredName}>{item.name}</Text>\n          <View style={styles.featuredDetails}>\n            <View style={styles.ratingContainer}>\n              <Ionicons name=\"star\" size={14} color=\"#FFD700\" />\n              <Text style={styles.ratingText}>{item.rating}</Text>\n            </View>\n            <Text style={styles.deliveryText}>{item.deliveryTime}</Text>\n          </View>\n        </View>\n      </View>\n    </TouchableOpacity>\n  );\n\n  const renderPopularRestaurant = ({ item }: { item: Restaurant }) => (\n    <TouchableOpacity\n      style={styles.popularCard}\n      onPress={() => navigation.navigate('RestaurantDetail' as never, { restaurant: item } as never)}\n    >\n      <Image source={{ uri: item.image }} style={styles.popularImage} />\n      <View style={styles.popularInfo}>\n        <Text style={styles.popularName}>{item.name}</Text>\n        <Text style={styles.popularCuisine}>{item.cuisine}</Text>\n        <View style={styles.popularDetails}>\n          <View style={styles.ratingContainer}>\n            <Ionicons name=\"star\" size={12} color=\"#FFD700\" />\n            <Text style={styles.popularRating}>{item.rating}</Text>\n          </View>\n          <Text style={styles.popularDelivery}>{item.deliveryTime}</Text>\n          <Text style={styles.popularFee}>${item.deliveryFee}</Text>\n        </View>\n      </View>\n    </TouchableOpacity>\n  );\n\n  return (\n    <ScrollView style={[styles.container, { backgroundColor: theme.colors.background }]}>\n      {/* Header */}\n      <View style={[styles.header, { backgroundColor: theme.colors.primary }]}>\n        <View style={styles.headerTop}>\n          <View>\n            <Text style={styles.greeting}>Good morning! 👋</Text>\n            <Text style={styles.location}>📍 123 Main St, City</Text>\n          </View>\n          <TouchableOpacity style={styles.notificationButton}>\n            <Ionicons name=\"notifications-outline\" size={24} color=\"white\" />\n            <View style={styles.notificationBadge}>\n              <Text style={styles.badgeText}>3</Text>\n            </View>\n          </TouchableOpacity>\n        </View>\n\n        {/* Search Bar */}\n        <View style={styles.searchContainer}>\n          <Ionicons name=\"search-outline\" size={20} color={theme.colors.textSecondary} />\n          <TextInput\n            style={styles.searchInput}\n            placeholder=\"Search for restaurants, food...\"\n            placeholderTextColor={theme.colors.textSecondary}\n            value={searchQuery}\n            onChangeText={setSearchQuery}\n          />\n          <TouchableOpacity style={styles.filterButton}>\n            <Ionicons name=\"options-outline\" size={20} color={theme.colors.primary} />\n          </TouchableOpacity>\n        </View>\n      </View>\n\n      {/* Categories */}\n      <View style={styles.section}>\n        <Text style={[styles.sectionTitle, { color: theme.colors.text }]}>Categories</Text>\n        <FlatList\n          data={categories}\n          renderItem={renderCategoryItem}\n          keyExtractor={(item) => item.id}\n          horizontal\n          showsHorizontalScrollIndicator={false}\n          contentContainerStyle={styles.categoriesList}\n        />\n      </View>\n\n      {/* Featured Restaurants */}\n      <View style={styles.section}>\n        <Text style={[styles.sectionTitle, { color: theme.colors.text }]}>Featured Restaurants</Text>\n        <FlatList\n          data={featuredRestaurants}\n          renderItem={renderFeaturedRestaurant}\n          keyExtractor={(item) => item.id}\n          horizontal\n          showsHorizontalScrollIndicator={false}\n          contentContainerStyle={styles.featuredList}\n        />\n      </View>\n\n      {/* Popular Near You */}\n      <View style={styles.section}>\n        <View style={styles.sectionHeader}>\n          <Text style={[styles.sectionTitle, { color: theme.colors.text }]}>Popular Near You</Text>\n          <TouchableOpacity>\n            <Text style={[styles.seeAll, { color: theme.colors.primary }]}>See All</Text>\n          </TouchableOpacity>\n        </View>\n        <FlatList\n          data={popularRestaurants}\n          renderItem={renderPopularRestaurant}\n          keyExtractor={(item) => item.id}\n          scrollEnabled={false}\n        />\n      </View>\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  header: {\n    paddingTop: 50,\n    paddingHorizontal: 20,\n    paddingBottom: 20,\n    borderBottomLeftRadius: 20,\n    borderBottomRightRadius: 20,\n  },\n  headerTop: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 20,\n  },\n  greeting: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: 'white',\n    marginBottom: 4,\n  },\n  location: {\n    fontSize: 14,\n    color: 'rgba(255, 255, 255, 0.8)',\n  },\n  notificationButton: {\n    position: 'relative',\n  },\n  notificationBadge: {\n    position: 'absolute',\n    top: -5,\n    right: -5,\n    backgroundColor: '#FFD700',\n    borderRadius: 10,\n    width: 20,\n    height: 20,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  badgeText: {\n    fontSize: 10,\n    fontWeight: 'bold',\n    color: '#FF6B6B',\n  },\n  searchContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: 'white',\n    borderRadius: 12,\n    paddingHorizontal: 16,\n    paddingVertical: 12,\n  },\n  searchInput: {\n    flex: 1,\n    marginLeft: 12,\n    fontSize: 16,\n    color: '#2C3E50',\n  },\n  filterButton: {\n    padding: 4,\n  },\n  section: {\n    marginTop: 24,\n    paddingHorizontal: 20,\n  },\n  sectionHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    marginBottom: 16,\n  },\n  sectionTitle: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    marginBottom: 16,\n  },\n  seeAll: {\n    fontSize: 14,\n    fontWeight: '600',\n  },\n  categoriesList: {\n    paddingRight: 20,\n  },\n  categoryItem: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    width: 70,\n    height: 70,\n    borderRadius: 35,\n    marginRight: 16,\n  },\n  categoryText: {\n    fontSize: 10,\n    fontWeight: '600',\n    color: 'white',\n    marginTop: 4,\n  },\n  featuredList: {\n    paddingRight: 20,\n  },\n  featuredCard: {\n    width: width * 0.7,\n    height: 180,\n    marginRight: 16,\n    borderRadius: 12,\n    overflow: 'hidden',\n  },\n  featuredImage: {\n    width: '100%',\n    height: '100%',\n  },\n  featuredOverlay: {\n    position: 'absolute',\n    bottom: 0,\n    left: 0,\n    right: 0,\n    backgroundColor: 'rgba(0, 0, 0, 0.6)',\n    padding: 16,\n  },\n  featuredInfo: {\n    flex: 1,\n  },\n  featuredName: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: 'white',\n    marginBottom: 8,\n  },\n  featuredDetails: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  ratingContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginRight: 12,\n  },\n  ratingText: {\n    fontSize: 14,\n    fontWeight: '600',\n    color: 'white',\n    marginLeft: 4,\n  },\n  deliveryText: {\n    fontSize: 14,\n    color: 'rgba(255, 255, 255, 0.8)',\n  },\n  popularCard: {\n    flexDirection: 'row',\n    backgroundColor: 'white',\n    borderRadius: 12,\n    marginBottom: 16,\n    overflow: 'hidden',\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 3,\n  },\n  popularImage: {\n    width: 80,\n    height: 80,\n  },\n  popularInfo: {\n    flex: 1,\n    padding: 12,\n  },\n  popularName: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    color: '#2C3E50',\n    marginBottom: 4,\n  },\n  popularCuisine: {\n    fontSize: 14,\n    color: '#7F8C8D',\n    marginBottom: 8,\n  },\n  popularDetails: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  popularRating: {\n    fontSize: 12,\n    fontWeight: '600',\n    color: '#2C3E50',\n    marginLeft: 2,\n    marginRight: 8,\n  },\n  popularDelivery: {\n    fontSize: 12,\n    color: '#7F8C8D',\n    marginRight: 8,\n  },\n  popularFee: {\n    fontSize: 12,\n    fontWeight: '600',\n    color: '#FF6B6B',\n  },\n});\n```\n\nNow let me create the Restaurant Detail screen:\n\n```typescript\n// src/screens/RestaurantDetailScreen.tsx\nimport React, { useState } from 'react';\nimport {\n  View,\n  Text,\n  StyleSheet,\n  ScrollView,\n  Image,\n  TouchableOpacity,\n  FlatList,\n  Dimensions,\n} from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport { useTheme } from '../context/ThemeContext';\nimport { useNavigation, useRoute } from '@react-navigation/native';\nimport { useCart } from '../context/CartContext';\n\nconst { width } = Dimensions.get('window');\n\ninterface MenuItem {\n  id: string;\n  name: string;\n  description: string;\n  price: number;\n  image: string;\n  category: string;\n  popular: boolean;\n  spicy: boolean;\n  vegetarian: boolean;\n}\n\ninterface MenuCategory {\n  id: string;\n  name: string;\n  items: MenuItem[];\n}\n\nconst menuData: MenuCategory[] = [\n  {\n    id: '1',\n    name: 'Popular',\n    items: [\n      {\n        id: '1',\n        name: 'Margherita Pizza',\n        description: 'Fresh tomatoes, mozzarella, basil, olive oil',\n        price: 18.99,\n        image: 'https://images.unsplash.com/photo-1604382354936-07c5d9983bd3?w=400',\n        category: 'Pizza',\n        popular: true,\n        spicy: false,\n        vegetarian: true,\n      },\n      {\n        id: '2',\n        name: 'Pepperoni Pizza',\n        description: 'Pepperoni, mozzarella, tomato sauce',\n        price: 21.99,\n        image: 'https://images.unsplash.com/photo-1565299624946-b28f40a0ca4b?w=400',\n        category: 'Pizza',\n        popular: true,\n        spicy: false,\n        vegetarian: false,\n      },\n    ],\n  },\n  {\n    id: '2',\n    name: 'Pizza',\n    items: [\n      {\n        id: '3',\n        name: 'Hawaiian Pizza',\n        description: 'Ham, pineapple, mozzarella, tomato sauce',\n        price: 22.99,\n        image: 'https://images.unsplash.com/photo-1565299507177-b0ac66763828?w=400',\n        category: 'Pizza',\n        popular: false,\n        spicy: false,\n        vegetarian: false,\n      },\n      {\n        id: '4',\n        name: 'Meat Lovers Pizza',\n        description: 'Pepperoni, sausage, ham, bacon, mozzarella',\n        price: 26.99,\n        image: 'https://images.unsplash.com/photo-1513104890138-7c749659a591?w=400',\n        category: 'Pizza',\n        popular: false,\n        spicy: true,\n        vegetarian: false,\n      },\n    ],\n  },\n  {\n    id: '3',\n    name: 'Appetizers',\n    items: [\n      {\n        id: '5',\n        name: 'Garlic Bread',\n        description: 'Crispy bread with garlic butter and herbs',\n        price: 8.99,\n        image: 'https://images.unsplash.com/photo-1573140247632-f8fd74997d5c?w=400',\n        category: 'Appetizers',\n        popular: false,\n        spicy: false,\n        vegetarian: true,\n      },\n      {\n        id: '6',\n        name: 'Mozzarella Sticks',\n        description: 'Crispy breaded mozzarella with marinara sauce',\n        price: 12.99,\n        image: 'https://images.unsplash.com/photo-1548340748-6d2b7d7da280?w=400',\n        category: 'Appetizers',\n        popular: true,\n        spicy: false,\n        vegetarian: true,\n      },\n    ],\n  },\n];\n\nexport default function RestaurantDetailScreen() {\n  const theme = useTheme();\n  const navigation = useNavigation();\n  const route = useRoute();\n  const { state: cartState, dispatch: cartDispatch } = useCart();\n  \n  // @ts-ignore\n  const { restaurant } = route.params;\n  \n  const [selectedCategory, setSelectedCategory] = useState('1');\n\n  const addToCart = (item: MenuItem) => {\n    cartDispatch({\n      type: 'ADD_ITEM',\n      payload: {\n        id: item.id,\n        name: item.name,\n        price: item.price,\n        quantity: 1,\n        image: item.image,\n        restaurantId: restaurant.id,\n        restaurantName: restaurant.name,\n      },\n    });\n  };\n\n  const renderMenuItem = ({ item }: { item: MenuItem }) => (\n    <TouchableOpacity\n      style={styles.menuItem}\n      onPress={() => navigation.navigate('MenuItem' as never, { item, restaurant } as never)}\n    >\n      <Image source={{ uri: item.image }} style={styles.menuItemImage} />\n      <View style={styles.menuItemInfo}>\n        <View style={styles.menuItemHeader}>\n          <Text style={[styles.menuItemName, { color: theme.colors.text }]}>{item.name}</Text>\n          <View style={styles.menuItemBadges}>\n            {item.popular && (\n              <View style={[styles.badge, { backgroundColor: theme.colors.primary }]}>\n                <Text style={styles.badgeText}>Popular</Text>\n              </View>\n            )}\n            {item.spicy && (\n              <View style={[styles.badge, { backgroundColor: theme.colors.error }]}>\n                <Text style={styles.badgeText}>🌶️</Text>\n              </View>\n            )}\n            {item.vegetarian && (\n              <View style={[styles.badge, { backgroundColor: theme.colors.success }]}>\n                <Text style={styles.badgeText}>🌱</Text>\n              </View>\n            )}\n          </View>\n        </View>\n        <Text style={[styles.menuItemDescription, { color: theme.colors.textSecondary }]}>\n          {item.description}\n        </Text>\n        <View style={styles.menuItemFooter}>\n          <Text style={[styles.menuItemPrice, { color: theme.colors.primary }]}>\n            ${item.price}\n          </Text>\n          <TouchableOpacity\n            style={[styles.addButton, { backgroundColor: theme.colors.primary }]}\n            onPress={() => addToCart(item)}\n          >\n            <Ionicons name=\"add\" size={20} color=\"white\" />\n          </TouchableOpacity>\n        </View>\n      </View>\n    </TouchableOpacity>\n  );\n\n  const renderCategoryTab = ({ item }: { item: MenuCategory }) => (\n    <TouchableOpacity\n      style={[\n        styles.categoryTab,\n        {\n          backgroundColor: selectedCategory === item.id ? theme.colors.primary : 'transparent',\n          borderColor: theme.colors.primary,\n        },\n      ]}\n      onPress={() => setSelectedCategory(item.id)}\n    >\n      <Text\n        style={[\n          styles.categoryTabText,\n          {\n            color: selectedCategory === item.id ? 'white' : theme.colors.primary,\n          },\n        ]}\n      >\n        {item.name}\n      </Text>\n    </TouchableOpacity>\n  );\n\n  const selectedCategoryData = menuData.find(cat => cat.id === selectedCategory);\n\n  return (\n    <View style={[styles.container, { backgroundColor: theme.colors.background }]}>\n      <ScrollView showsVerticalScrollIndicator={false}>\n        {/* Restaurant Header */}\n        <View style={styles.header}>\n          <Image source={{ uri: restaurant.image }} style={styles.restaurantImage} />\n          <View style={styles.headerOverlay}>\n            <TouchableOpacity\n              style={styles.backButton}\n              onPress={() => navigation.goBack()}\n            >\n              <Ionicons name=\"arrow-back\" size={24} color=\"white\" />\n            </TouchableOpacity>\n            <TouchableOpacity style={styles.favoriteButton}>\n              <Ionicons name=\"heart-outline\" size={24} color=\"white\" />\n            </TouchableOpacity>\n          </View>\n        </View>\n\n        {/* Restaurant Info */}\n        <View style={[styles.restaurantInfo, { backgroundColor: theme.colors.surface }]}>\n          <Text style={[styles.restaurantName, { color: theme.colors.text }]}>\n            {restaurant.name}\n          </Text>\n          <Text style={[styles.restaurantCuisine, { color: theme.colors.textSecondary }]}>\n            {restaurant.cuisine}\n          </Text>\n          \n          <View style={styles.restaurantStats}>\n            <View style={styles.statItem}>\n              <Ionicons name=\"star\" size={16} color=\"#FFD700\" />\n              <Text style={[styles.statText, { color: theme.colors.text }]}>\n                {restaurant.rating}\n              </Text>\n            </View>\n            <View style={styles.statItem}>\n              <Ionicons name=\"time-outline\" size={16} color={theme.colors.textSecondary} />\n              <Text style={[styles.statText, { color: theme.colors.text }]}>\n                {restaurant.deliveryTime}\n              </Text>\n            </View>\n            <View style={styles.statItem}>\n              <Ionicons name=\"bicycle-outline\" size={16} color={theme.colors.textSecondary} />\n              <Text style={[styles.statText, { color: theme.colors.text }]}>\n                ${restaurant.deliveryFee}\n              </Text>\n            </View>\n          </View>\n        </View>\n\n        {/* Category Tabs */}\n        <View style={styles.categoryTabs}>\n          <FlatList\n            data={menuData}\n            renderItem={renderCategoryTab}\n            keyExtractor={(item) => item.id}\n            horizontal\n            showsHorizontalScrollIndicator={false}\n            contentContainerStyle={styles.categoryTabsList}\n          />\n        </View>\n\n        {/* Menu Items */}\n        <View style={styles.menuSection}>\n          <FlatList\n            data={selectedCategoryData?.items || []}\n            renderItem={renderMenuItem}\n            keyExtractor={(item) => item.id}\n            scrollEnabled={false}\n          />\n        </View>\n      </ScrollView>\n\n      {/* Cart Button */}\n      {cartState.itemCount > 0 && (\n        <TouchableOpacity\n          style={[styles.cartButton, { backgroundColor: theme.colors.primary }]}\n          onPress={() => navigation.navigate('Cart' as never)}\n        >\n          <View style={styles.cartButtonContent}>\n            <View style={styles.cartBadge}>\n              <Text style={styles.cartBadgeText}>{cartState.itemCount}</Text>\n            </View>\n            <Text style={styles.cartButtonText}>View Cart</Text>\n            <Text style={styles.cartButtonPrice}>${cartState.total.toFixed(2)}</Text>\n          </View>\n        </TouchableOpacity>\n      )}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  header: {\n    height: 250,\n    position: 'relative',\n  },\n  restaurantImage: {\n    width: '100%',\n    height: '100%',\n  },\n  headerOverlay: {\n    position: 'absolute',\n    top: 50,\n    left: 0,\n    right: 0,\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    paddingHorizontal: 20,\n  },\n  backButton: {\n    width: 40,\n    height: 40,\n    borderRadius: 20,\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  favoriteButton: {\n    width: 40,\n    height: 40,\n    borderRadius: 20,\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  restaurantInfo: {\n    padding: 20,\n    marginTop: -20,\n    borderTopLeftRadius: 20,\n    borderTopRightRadius: 20,\n  },\n  restaurantName: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    marginBottom: 4,\n  },\n  restaurantCuisine: {\n    fontSize: 16,\n    marginBottom: 16,\n  },\n  restaurantStats: {\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n  },\n  statItem: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  statText: {\n    fontSize: 14,\n    fontWeight: '600',\n    marginLeft: 4,\n  },\n  categoryTabs: {\n    paddingVertical: 16,\n  },\n  categoryTabsList: {\n    paddingHorizontal: 20,\n  },\n  categoryTab: {\n    paddingHorizontal: 20,\n    paddingVertical: 10,\n    borderRadius: 20,\n    borderWidth: 1,\n    marginRight: 12,\n  },\n  categoryTabText: {\n    fontSize: 14,\n    fontWeight: '600',\n  },\n  menuSection: {\n    paddingHorizontal: 20,\n    paddingBottom: 100,\n  },\n  menuItem: {\n    flexDirection: 'row',\n    backgroundColor: 'white',\n    borderRadius: 12,\n    marginBottom: 16,\n    overflow: 'hidden',\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.1,\n    shadowRadius: 4,\n    elevation: 3,\n  },\n  menuItemImage: {\n    width: 100,\n    height: 100,\n  },\n  menuItemInfo: {\n    flex: 1,\n    padding: 12,\n  },\n  menuItemHeader: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'flex-start',\n    marginBottom: 4,\n  },\n  menuItemName: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    flex: 1,\n  },\n  menuItemBadges: {\n    flexDirection: 'row',\n  },\n  badge: {\n    paddingHorizontal: 6,\n    paddingVertical: 2,\n    borderRadius: 8,\n    marginLeft: 4,\n  },\n  badgeText: {\n    fontSize: 10,\n    fontWeight: 'bold',\n    color: 'white',\n  },\n  menuItemDescription: {\n    fontSize: 14,\n    marginBottom: 8,\n    lineHeight: 20,\n  },\n  menuItemFooter: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n  },\n  menuItemPrice: {\n    fontSize: 18,\n    fontWeight: 'bold',\n  },\n  addButton: {\n    width: 32,\n    height: 32,\n    borderRadius: 16,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  cartButton: {\n    position: 'absolute',\n    bottom: 20,\n    left: 20,\n    right: 20,\n    borderRadius: 12,\n    paddingVertical: 16,\n  },\n  cartButtonContent: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    paddingHorizontal: 20,\n  },\n  cartBadge: {\n    backgroundColor: 'rgba(255, 255, 255, 0.2)',\n    borderRadius: 12,\n    paddingHorizontal: 8,\n    paddingVertical: 4,\n  },\n  cartBadgeText: {\n    color: 'white',\n    fontSize: 12,\n    fontWeight: 'bold',\n  },\n  cartButtonText: {\n    color: 'white',\n    fontSize: 16,\n    fontWeight: 'bold',\n    flex: 1,\n    textAlign: 'center',\n  },\n  cartButtonPrice: {\n    color: 'white',\n    fontSize: 16,\n    fontWeight: 'bold',\n  },\n});\n```\n\nI'll continue with the remaining screens and components to complete the food delivery app. The app includes beautiful UI, smooth animations, and all the requested features like restaurant browsing, menu viewing, cart management, and order tracking.",
      },
      {
        role: "user",
        content: "Please change bottom bar icons...",
      },
    ],
    stream: true,
    max_tokens: 4000,
  };

  try {
    console.log(
      `📤 Sending large request (${
        JSON.stringify(requestBody).length
      } bytes)...`
    );

    const response = await fetch("http://localhost:8000/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(requestBody),
    });

    console.log(`📥 Response status: ${response.status}`);
    console.log(
      `📥 Response headers:`,
      Object.fromEntries(response.headers.entries())
    );

    if (!response.ok) {
      const errorText = await response.text();
      console.error(`❌ Request failed: ${response.status} - ${errorText}`);
      return;
    }

    if (!response.body) {
      console.error("❌ No response body");
      return;
    }

    const reader = response.body.getReader();
    const decoder = new TextDecoder();
    let totalContent = "";
    let chunkCount = 0;

    console.log("📡 Starting to read streaming response...");

    while (true) {
      const { done, value } = await reader.read();

      if (done) {
        console.log("✅ Stream completed");
        break;
      }

      chunkCount++;
      const chunk = decoder.decode(value, { stream: true });

      // Parse SSE format
      const lines = chunk.split("\n");
      for (const line of lines) {
        if (line.startsWith("data: ") && !line.includes("[DONE]")) {
          try {
            const data = line.slice(6);
            if (data.trim() === "") continue;
            const parsed = JSON.parse(data);
            if (
              parsed.choices &&
              parsed.choices[0] &&
              parsed.choices[0].delta &&
              parsed.choices[0].delta.content
            ) {
              totalContent += parsed.choices[0].delta.content;
            }
          } catch (e) {
            // Ignore JSON parse errors
          }
        }
      }
    }

    console.log(`📊 Final results:`);
    console.log(
      `   📝 Total content length: ${totalContent.length} characters`
    );
    console.log(`   📦 Total chunks: ${chunkCount}`);
    console.log(`   📄 Content preview: ${totalContent.slice(0, 200)}...`);
    console.log(`   📄 Content ending: ...${totalContent.slice(-100)}`);

    if (totalContent.length === 0) {
      console.log("🚨 REPRODUCED: Empty response issue!");
    } else {
      console.log("✅ Response received successfully");
    }
  } catch (error) {
    console.error("❌ Test failed:", error);
  }
}

// Run the test
testLargeRequest();
